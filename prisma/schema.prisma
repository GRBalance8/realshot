generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  role            UserRole  @default(USER)
  isFirstTimeUser Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  sessions        Session[]
  orders          Order[]
  profile         Profile?

  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  password         String?
}

model Profile {
  id             String   @id @default(cuid())
  userId         String   @unique
  hobbies        String?  @db.Text
  location       String?
  style          String?  @db.Text
  additionalInfo String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  status            OrderStatus   @default(PENDING)
  imagesProcessed   Boolean       @default(false)
  trainingInitiated Boolean       @default(false)
  imagesGenerated   Boolean       @default(false)
  orderCompleted    Boolean       @default(false)
  responsiblePerson String?
  totalAmount       Decimal       @default(0) @db.Decimal(10, 2)
  paymentStatus     PaymentStatus @default(PENDING)
  stripeSessionId   String?       @unique
  paymentIntentId   String?       @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploadedPhotos    UploadedPhoto[]
  generatedPhotos   GeneratedPhoto[]
  photoRequests     PhotoRequest[]

  @@index([userId])
  @@index([stripeSessionId])
  @@index([paymentIntentId])
}

model UploadedPhoto {
  id        String    @id @default(cuid())
  url       String
  orderId   String
  createdAt DateTime  @default(now())

  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model GeneratedPhoto {
  id        String    @id @default(cuid())
  url       String
  orderId   String
  createdAt DateTime  @default(now())

  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model PhotoRequest {
  id              String    @id @default(cuid())
  orderId         String
  description     String    @db.Text
  referenceImage  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model ErrorLog {
  id        String   @id @default(cuid())
  message   String
  stack     String?  @db.Text
  timestamp DateTime @default(now())
  userId    String?
  path      String?

  @@index([timestamp])
}

